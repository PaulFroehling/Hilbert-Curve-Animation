 /**
 *ANIMATION OF SKILLINGS' ALGORITHM FOR CALCULATING THE HILBERT CURVE
 *
 *Processing Sketch for plotting the different transformations of the Skillings' Algorithm for plotting the Hilbert Curve.
 *The states generated by the algorithm are stored in the different .csv files that are generated by my implementation of Skillings' algorithm
 *The sketch starts at the first stage of transformations, interpolates to the second, from second to third and so on.
 *Every step (first to second, second to third ...) is counted by the variable animationPhase
 *Every animationPhase takes N_STEPs
 *
 * Please store animation files in the format nbits_ndimensions.csv. If you choose a different format - adjust the code in getNumberOfBits()
 */

import peasy.*;

PeasyCam cam;


void setup(){
  size(800, 800, P3D);
  pixelDensity(displayDensity());
  smooth();
  File dataFolder = new File(dataPath(csv_path));
  
  setupGifExport();
  setNumberOfBitsAndDimensions(dataFolder);
  setHCScalingFactor();//Folder containing csv files with points of the respective stages of the algorithm. 
  loadCSVFiles(dataFolder); //Loads results and saves them in pointLists (globalVariables)
  
  if(NUMBER_OF_DIMENSIONS == 3){
    setup3dAnimationCam();
  }
}
 
 
void draw(){ 
  currentStep++;
  adjustCoordinateSystem(); //Shifts the origin of the grid from upper left to lower left
  
  if(shouldAnimate()){     //Take N_STEPs for every animation
   
    background(BACKGROUND_COLOR);
    ArrayList<PVector> interpolatedPoints = interpolateCurrentStep(); //Interpolate between points of current files
    plotPoints(interpolatedPoints); //Plot interpolated points
    plotLines(interpolatedPoints);  //Plot lines between interpolated points
  
  }else{
    proceedToNextAnimationPhase();
  }
  popMatrix();  
 }
 
//Press "space" at the beginning of the animation to start a tracking shot 
void keyPressed() {
  if (key == ' ' && NUMBER_OF_DIMENSIONS == 3) {
    cam.setState(startState);         
    cam.setState(endState, 10000);     
  }
}
